=======================================
常用工作技巧
=======================================

请容许我再次重申：对于我们这样的小团队而言，工作效率是团队能否存活下来的重要方面。

让我说的更直白一些：作为实习生，你的工作效率是否达到我的最低要求，直接决定了是否可以留在团队。
工作效率这里是指：第一，是否能够在DDL前完成交付；第二，培养你需要占用的我的时间，是否超过了我自己做这项工作的平摊时间。
平摊时间是指我的时间投入加上以后通过将同类（不需要我再投入时间指导或返工）工作 Offloading 给你而扣除的我的时间的期望（E）。



如何通过 GitHub 的 Pull Request 提交工作
====================================================

实习生相关的工作有超过半数是在 GitHub 上公开进行的。
因此，如何熟练的使用 GitHub 的各种功能就显得对于效率的提升尤为重要。

第一次提交PR的时候
----------------------------------------------------

如果是第一天在一个 GitHub 公开仓库上工作，那么遵守 fork-commit-push-PR 流程。具体流程可以 Google 到 GitHub 的官方文档或者其他优秀的教程。

需要注意的是，任何工作最好都不要在已经有的分支上进行。默认应该是每次工作开一个新的分支。

理由是如果是在已有的分支上进行commit（熟练实习生一般是偷懒或者习惯没有养成，新手实习生往往是不知道可以 checkout -b），
那么基本上是「单线程」的工作模式：在 master 分支上 commit 之后， push 到自己的 GitHub remote，
发起 PR，然后就什么都做不了了，等我来处理。

正确做法是每次工作都开一个新的分支来做。具体：

1. Clone 下来 repo，切换到 master 或者 develop 分支（具体根据项目约定）。
2. 从项目工作约定的分支 `checkout -b` 一个 local branch，分支名字可以是 `issueNNN`，对应任务的 id。
3. work，commit，work，commit，得到一个 commit list （有时候对应的patches叫 patch set）
4. push 到你自己的 GitHub remote 的新分支，注意是新分支，一般是跟本地分支名字相同（to save your time and life）。
5. 登陆进入 GitHub 网页，看到你的分支，按照提示进行 Pull Request 操作。注意一定要选对目标分支，如果不明白，跟你的mentor询问。
6. Reviewer （一般是你的mentor）进行 code review。一般会提一些意见，要求修改。
7. 如果要求修改，跳转到 3. 新的修改push到已经发起PR的分支之后不需要重复发起PR。
8. 如果被merge，那么恭喜🎉同时要注意，现在开始你的工作流程就不一样了。继续往下看。

第 N+1 次提交PR的时候
------------------------------------------------------

OK，现在恭喜你，已经有了被 merge 的 PR。同时有一个坏消息告诉你：
从现在开始你 fork 出来的 repo 已经跟上游的 repo 不一样了。
虽然我曾经惊奇的发现过一个简单粗暴的解决办法【1】但是我并不打算告诉你。

正确的做法如下：

1. 进入已经 clone 的 repo。运行 `git remote -v`。预期看到一个 remote，名字是 origin， URL 是你的 GitHub repo，forked from repo AAA。
2. 假设你的repo是从 repo AAA fork 出来的。例如 https://github.com/lazyparser/becoming-a-compiler-engineer-codes 运行 `git remote add lazyparser URL`。 这一步的作用是添加了一个新的 remote。 remote 的名字可以自己取一个，没有什么需要遵守的规律。
3. 运行 `git fetch lazyparser` 将上游仓库的代码也 clone 一份下来到你的本地机器（跟 origin 同样保存在 .git 目录下）
4. 本地创建一个分支，从你计划 push 的 branch。具体 `git help branch` or `git help checkout`。你会发现原来这些命令都可以带两个以上参数的。一条命令搞定。
5. work，commit，work，commit，得到一个 commit list （有时候对应的patches叫 patch set）
6. 【注意】 push 到 **你自己的** GitHub remote 的新分支，注意是新分支，一般是跟本地分支名字相同（to save your time and life）。
7. 其他都跟第一次类似了。
8. 以后，如果PR遇到冲突，表示上游分支已经更新了，你需要更新自己的本地分支已解决冲突。解决方法是 git fetch 然后 git rebase。遇到冲突的时候，用 git status 查看哪些是冲突的，打开，一个个修改。搜索类似 `<<<<HEAD` 这样的字样。
9. 修改（fix）了所有的conflicts之后，用 git rebase --continue 继续 rebase。
10. rebase完成之后，push到你自己的remote（一般是 origin）。如果已经发起了PR，那么PR应该自动更新了。

其它情况
-------------------------------------------------------

TODO 由实习生遇到问题之后发起PR到这里。



如何正确的提问
====================================================

TBD

如何正确的报告bugs
====================================================

TBD

如何正确的进行情报收集（Google tips）
====================================================

TBD

如何做进度报告
====================================================

TBD


ZIP文件的跨OS操作注意事项
====================================================

压缩和解压缩的文件的时候注意，如果是zip文件，中文文件名可能会有乱码。

中文 windows 默认会使用 GBK 编码文件名，macOS 和 Linux 使用 UTF8。

解决方法在 Linux 下是使用可以指定文件名编码格式的解压命令行工具。

FIXME： macOS 下的我还没有找到。

所以保守的建议是：不要使用中文文件名，使用英文名。


如何正确简洁的复制B站的链接
=====================================================

URL 是浏览器跟WWW服务器之间的通信协议。

URL 中从问号开始的部分，参数，这部分参数，有时候是用来跟踪用户会话，而不是用来唯一标识资源的。

例如如果直接在B站搜索视频，可以得到类似

https://www.bilibili.com/video/av83277184?from=search&seid=1289633595657602924

这样的链接。而实际上在B站，问号和问号后面的是不需要的，可以改成

https://www.bilibili.com/video/av83277184

在内部系统的时候贴的可以更加简洁。而对于B站而言，有一个约定俗称的编号系统就是av号，可以进一步所见为

av83277184

就足够唯一的表示出来要指称的对象了。在满足【原则08】的基础上做到了最大程度的简洁。


中文输入法中全、半角的正确使用
====================================================

日常工作中技术文档的撰写普遍会有中、英文夹杂的情况。在中文输入中，需要注意全角和半角概念。简单而言，
，在英文输入法中，一个英文字符和标点符号 （如 “a”）所占的位置是半角；而在中文输入中，一个汉字所占据
的位置等于两个半角，称为“全角”。默认状态下，英文输入法和中文输入法都是半角的设置，这意味这两种输入法
下所输入的英文字符、符号和数字，都只占据一个“半角”位置。

但是，在中文输入法下，可能会因为快捷键的误操作（如： shift + space ）导致全半角误切换，切换后，输入
的英文字符、符号和数字就会被当成汉字处理，看起来占据了“更宽”的位置，例如，从半角的“hello world123”
变成“ｈｅｌｌｏ　ｗｏｒｌｄ１２３”。这看起来是很别扭的，显得很不专业。

因此，在写文档时，一定要注意中文输入法中全、半角的正确使用。

文档中粘贴超链接时，前后务必加空格
====================================================

文档中的超链接是用来方便读者深入阅读的，读者要么直接点击链接跳转到相关链接，要么会选择复制粘贴链接
在浏览器中访问。无论是哪一种情况，编辑超链接时，在其前后加上空格都会极大地方便读者。

例如：

这样引用超链接 https://github.com/lazyparser/survivial-manual-for-interns 前后加空格是好的做法；

这样引用超链接https://github.com/lazyparser/survivial-manual-for-interns前后不加空格不是好的做法。

写中英文夹杂的文档时，在中文和英文之间加入空格
====================================================

这样做能够方便编辑器发挥其拼写检查功能。

在使用Word编辑文档时，将常用的术语加入“字典”
====================================================

这样做能够方便编辑器发挥其拼写检查功能。



【1】 我曾经指导过的一位实习生，每次要解决跟我（upstream）的repo不一致时候，都是删除自己的 fork，重新 fork。提交了多少次 PR 就删除了多少次。
更好玩的是，他还教会了周围的还处在迷茫中的实习生，一度成为了。
